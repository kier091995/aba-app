{"ast":null,"code":"import { __awaiter } from \"tslib\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../providers/post-provider.service\";\nimport * as i3 from \"@ionic/angular\";\nimport * as i4 from \"src/app/app.component\";\nexport let SignatureUploadPage = /*#__PURE__*/(() => {\n  class SignatureUploadPage {\n    constructor(router, postPvd, toastController, menuCtrl, alertController, someComponent, plt) {\n      this.router = router;\n      this.postPvd = postPvd;\n      this.toastController = toastController;\n      this.menuCtrl = menuCtrl;\n      this.alertController = alertController;\n      this.someComponent = someComponent;\n      this.plt = plt;\n    }\n\n    ngOnInit() {\n      this.getSign();\n    }\n\n    backButton() {\n      this.router.navigate(['/profile']);\n    }\n\n    signChange(event) {\n      var file = $(\"input[type=file]\").get(0).files[0];\n\n      if (file) {\n        var reader = new FileReader();\n\n        reader.onload = function () {\n          $(\"#output\").attr(\"src\", reader.result);\n        };\n\n        reader.readAsDataURL(file);\n      }\n    }\n\n    getSign() {\n      return new Promise(resolve => {\n        let body = {\n          action: 'fetchSign',\n          ucode: localStorage.getItem(\"UCODE\"),\n          utype: localStorage.getItem(\"UTYPE\")\n        };\n        this.postPvd.postData(body, localStorage.getItem(\"HOMELINK\")).subscribe(data => {\n          // this.sign = data['sign'];\n          $(\"#output\").attr('src', data['sign']);\n        });\n      });\n    }\n\n    saveSignature() {\n      if (this.plt.is('ios')) {\n        var ptname = 'ios';\n      } else if (this.plt.is('android')) {\n        var ptname = 'android';\n      } else {\n        var ptname = 'APP';\n      }\n\n      var formData = new FormData();\n      var file = $(\"#signature\")[0].files;\n\n      if (file.length > 0) {\n        var link1 = localStorage.getItem(\"HOMELINK\");\n        var link = link1.slice(0, -1) + 'WithEmails/EmeUploadSignature';\n        formData.append('action', 'save');\n        formData.append('ucode', localStorage.getItem('UCODE'));\n        formData.append('file', file[0]);\n        formData.append('plt', ptname);\n        $.ajax({\n          url: link,\n          type: 'POST',\n          dataType: 'json',\n          data: formData,\n          contentType: false,\n          processData: false,\n          success: function (data) {\n            if (data['status'] == \"ok\") {\n              jsopenToasts('<center>Signature upload successful.<center>');\n              setTimeout(function () {\n                $('#signature').val('');\n                $('#saveSignature').removeAttr('disabled');\n              }, 3000);\n            } else {\n              $('#saveSignature').removeAttr('disabled');\n              jsopenToaste('<center>Error occured!<center>');\n            }\n          }\n        });\n      } else {\n        jsopenToaste('<center>No file selected!<center>');\n      }\n\n      function jsopenToasts(msg) {\n        return __awaiter(this, void 0, void 0, function* () {\n          const toast = document.createElement('ion-toast');\n          toast.message = '<center>' + msg + '</center>';\n          toast.duration = 2000;\n          toast.color = 'success';\n          document.body.appendChild(toast);\n          return toast.present();\n        });\n      }\n\n      function jsopenToaste(msg) {\n        return __awaiter(this, void 0, void 0, function* () {\n          const toast = document.createElement('ion-toast');\n          toast.message = '<center>' + msg + '</center>';\n          toast.duration = 2000;\n          toast.color = 'danger';\n          document.body.appendChild(toast);\n          return toast.present();\n        });\n      }\n    }\n\n    doRefresh(event) {\n      setTimeout(() => {\n        this.getSign();\n        event.target.complete();\n      }, 2000);\n    }\n\n  }\n\n  SignatureUploadPage.ɵfac = function SignatureUploadPage_Factory(t) {\n    return new (t || SignatureUploadPage)(i0.ɵɵdirectiveInject(i1.Router), i0.ɵɵdirectiveInject(i2.PostProviderService), i0.ɵɵdirectiveInject(i3.ToastController), i0.ɵɵdirectiveInject(i3.MenuController), i0.ɵɵdirectiveInject(i3.AlertController), i0.ɵɵdirectiveInject(i4.AppComponent), i0.ɵɵdirectiveInject(i3.Platform));\n  };\n\n  SignatureUploadPage.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: SignatureUploadPage,\n    selectors: [[\"app-signature-upload\"]],\n    decls: 19,\n    vars: 0,\n    consts: [[\"slot\", \"start\"], [\"id\", \"back\", 3, \"click\"], [\"name\", \"chevron-back-outline\", 1, \"return\"], [\"slot\", \"fixed\", 3, \"ionRefresh\"], [\"clas\", \"file_input_wrap\"], [\"type\", \"file\", \"accept\", \"image/*\", \"id\", \"signature\", \"hidden\", \"true\", 1, \"hide\", 3, \"change\"], [\"for\", \"signature\", 1, \"btn\", \"btn-large\"], [\"name\", \"image\"], [\"id\", \"output\", \"src\", \"\", \"height\", \"150\", \"width\", \"250\"], [\"expand\", \"block\", \"color\", \"secondary\", \"id\", \"saveSignature\", \"size\", \"small\", 3, \"click\"]],\n    template: function SignatureUploadPage_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"ion-header\");\n        i0.ɵɵelementStart(1, \"ion-toolbar\");\n        i0.ɵɵelementStart(2, \"ion-buttons\", 0);\n        i0.ɵɵelementStart(3, \"ion-button\", 1);\n        i0.ɵɵlistener(\"click\", function SignatureUploadPage_Template_ion_button_click_3_listener() {\n          return ctx.backButton();\n        });\n        i0.ɵɵelement(4, \"ion-icon\", 2);\n        i0.ɵɵelementStart(5, \"ion-label\");\n        i0.ɵɵtext(6, \"Back\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"ion-content\");\n        i0.ɵɵelementStart(8, \"ion-refresher\", 3);\n        i0.ɵɵlistener(\"ionRefresh\", function SignatureUploadPage_Template_ion_refresher_ionRefresh_8_listener($event) {\n          return ctx.doRefresh($event);\n        });\n        i0.ɵɵelement(9, \"ion-refresher-content\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"ion-card\");\n        i0.ɵɵelementStart(11, \"div\", 4);\n        i0.ɵɵelementStart(12, \"input\", 5);\n        i0.ɵɵlistener(\"change\", function SignatureUploadPage_Template_input_change_12_listener() {\n          return ctx.signChange(ctx.event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"label\", 6);\n        i0.ɵɵelement(14, \"ion-icon\", 7);\n        i0.ɵɵtext(15, \" Upload a signaure\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(16, \"img\", 8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"ion-button\", 9);\n        i0.ɵɵlistener(\"click\", function SignatureUploadPage_Template_ion_button_click_17_listener() {\n          return ctx.saveSignature();\n        });\n        i0.ɵɵtext(18, \"Save\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n    },\n    directives: [i3.IonHeader, i3.IonToolbar, i3.IonButtons, i3.IonButton, i3.IonIcon, i3.IonLabel, i3.IonContent, i3.IonRefresher, i3.IonRefresherContent, i3.IonCard],\n    styles: [\".hide[_ngcontent-%COMP%]{display:none}.btn[_ngcontent-%COMP%]{display:inline-block;padding:4px 12px;margin-bottom:0;font-size:14px;line-height:20px;color:#333;text-align:center;vertical-align:middle;cursor:pointer;border:1px solid #ddd;box-shadow:2px 2px 10px #eee;border-radius:4px}\"]\n  });\n  return SignatureUploadPage;\n})();","map":null,"metadata":{},"sourceType":"module"}